plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('key.properties')
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

android {
    signingConfigs {
        development {

            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['development.keyAlias']
                keyPassword keyProperties['development.keyPassword']
                storeFile keyProperties['development.storeFile'] ? file(keyProperties['development.storeFile']) : null
                storePassword keyProperties['development.storePassword']
            }

        }
        qa {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['qa.keyAlias']
                keyPassword keyProperties['qa.keyPassword']
                storeFile keyProperties['qa.storeFile'] ? file(keyProperties['qa.storeFile']) : null
                storePassword keyProperties['qa.storePassword']
            }

        }
        uat {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['uat.keyAlias']
                keyPassword keyProperties['uat.keyPassword']
                storeFile keyProperties['uat.storeFile'] ? file(keyProperties['uat.storeFile']) : null
                storePassword keyProperties['uat.storePassword']
            }

        }
        prod {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['prod.keyAlias']
                keyPassword keyProperties['prod.keyPassword']
                storeFile keyProperties['prod.storeFile'] ? file(keyProperties['prod.storeFile']) : null
                storePassword keyProperties['prod.storePassword']
            }

        }
    }

    namespace = "go.template.flutter.flutter_template_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "go.template.flutter.flutter_template_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        testInstrumentationRunner "pl.leancode.patrol.PatrolJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: "true"

    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.prod
        }
        debug {
            minifyEnabled false
            shrinkResources false
        }
    }
    testOptions {
        execution "ANDROIDX_TEST_ORCHESTRATOR"
    }

// ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions "flavor-type"

    productFlavors {
        development {
            dimension "flavor-type"
            applicationId "go.template.flutter"
            applicationIdSuffix ".development"
            versionNameSuffix "Development"
            signingConfig signingConfigs.development
            resValue "string", "app_name", "DevelopmentFlutterTemplateApp"
        }
        qa {
            dimension "flavor-type"
            applicationId "go.template.flutter.qa"
            applicationIdSuffix ".qa"
            versionNameSuffix "QA"
            signingConfig signingConfigs.qa
            resValue "string", "app_name", "QAFlutterTemplateApp"
        }
        uat {
            dimension "flavor-type"
            applicationId "go.template.flutter"
            applicationIdSuffix ".uat"
            versionNameSuffix "UAT"
            signingConfig signingConfigs.uat
            resValue "string", "app_name", "UATFlutterTemplateApp"
        }
        prod {
            dimension "flavor-type"
            applicationId "go.template.flutter"
            signingConfig signingConfigs.prod
            resValue "string", "app_name", "FlutterTemplateApp"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----



}

flutter {
    source = "../.."
}

dependencies {
    androidTestUtil "androidx.test:orchestrator:1.4.2"
}