package test_resources.android.build_gradle_processor_test

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    signingConfigs {
        debug {

            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['dev.keyAlias']
                keyPassword keyProperties['dev.keyPassword']
                storeFile keyProperties['dev.storeFile'] ? file(keyProperties['dev.storeFile']) : null
                storePassword keyProperties['dev.storePassword']
            }

        }
        qa {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['qa.keyAlias']
                keyPassword keyProperties['qa.keyPassword']
                storeFile keyProperties['qa.storeFile'] ? file(keyProperties['qa.storeFile']) : null
                storePassword keyProperties['qa.storePassword']
            }

        }
        uat {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['uat.keyAlias']
                keyPassword keyProperties['uat.keyPassword']
                storeFile keyProperties['uat.storeFile'] ? file(keyProperties['uat.storeFile']) : null
                storePassword keyProperties['uat.storePassword']
            }

        }
        release {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keyProperties['prod.keyAlias']
                keyPassword keyProperties['prod.keyPassword']
                storeFile keyProperties['prod.storeFile'] ? file(keyProperties['prod.storeFile']) : null
                storePassword keyProperties['prod.storePassword']
            }

        }
    }
    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "flavor-type"

    productFlavors {
        apple1 {
            dimension "flavor-type"
            applicationId "com.example.apple"
            resValue "string", "app_name", "Apple App"
        }
        banana {
            dimension "flavor-type"
            applicationId "com.example.banana"
            resValue "string", "app_name", "Banana App"
            resValue "string", "variable_one", "test variable one"
            resValue "string", "variable_two", "test variable two"
            buildConfigField "String", "field_one", "\"test field one\""
            buildConfigField "char", "field_two", '\'y\''
            buildConfigField "double", "field_three", "20.0"
        }
    }
    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.mylittlesuite.flutterflavorizr_example"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

